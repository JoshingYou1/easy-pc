# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2

workflows:
  version: 2
  test:
    jobs:
      - test

jobs:
  test:
    working_directory: ~/app
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.6.3-node-browsers
        environment:
          RAILS_ENV: test
          MAX_THREADS: 2
          WEB_CONCURRENCY: 1

          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: web_app

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.5-alpine
        environment:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: web_app

    # here's what we want to do
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      # Get resources faster because they're cached
      - restore_cache:
          name: Restore Yarn Packages Cache
          keys:
            - v1-yarn-packages-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - v1-yarn-packages-{{ arch }}-{{ .Branch }}
            - v1-yarn-packages
      # install yarn
      - run: yarn install --frozen-lockfile

      - run:
          name: configure bundler
          command: |
            gem install bundler
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      # Save the cache so we don't have to install the gems every time
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run: bundle exec rails db:create
      - run: bundle exec rails db:schema:load

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

            bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            --format progress \
                            $TEST_FILES


      # collect reports
      - store_test_results:
          path: /tmp/test-results