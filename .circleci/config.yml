# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#

version: 2.1 # Use 2.1 to enable using orbs and other features.

# Declare the orbs that we'll use in our config.
# read more about orbs: https://circleci.com/docs/2.0/using-orbs/
orbs:
  ruby: circleci/ruby@1.0
  node: circleci/node@2

jobs:
  build: # our first job, named "build"
    docker:
      - image: circleci/ruby:2.6.3-node-browsers
        environment:
        RAILS_ENV: test
        MAX_THREADS: 2
        WEB_CONCURRENCY: 1

        POSTGRES_PASSWORD: postgres
        POSTGRES_USER: postgres
        POSTGRES_DB: web_app
        POSTGRES_HOST: 127.0.0.1
        POSTGRES_PORT: 5432

        # Specify service dependencies here if necessary
        # CircleCI maintains a library of pre-built images
        # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.5-alpine
        environment:
        POSTGRES_PASSWORD: postgres
        POSTGRES_USER: postgres
        POSTGRES_DB: web_app

    steps:
      - checkout # pull down our git code.
      - ruby/install-deps # use the ruby orb to install dependencies
      # use the node orb to install our packages
      # specifying that we use `yarn` and to cache dependencies with `yarn.lock`
      # learn more: https://circleci.com/docs/2.0/caching/
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"

  test:  # our next job, called "test"
    # we run "parallel job containers" to enable speeding up our tests;
    # this splits our tests across multiple containers.
    parallelism: 3
    # here we set TWO docker images.
    docker:
      - image: cimg/ruby:2.7-node # this is our primary docker image, where step commands run.
      - image: circleci/postgres:9.5-alpine
        environment: # add POSTGRES environment variables.
          POSTGRES_USER: circleci-demo-ruby
          POSTGRES_DB: rails_blog_test
          POSTGRES_PASSWORD: ""
    # environment variables specific to Ruby/Rails, applied to the primary container.
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      PGHOST: 127.0.0.1
      PGUSER: circleci-demo-ruby
      PGPASSWORD: ""
      RAILS_ENV: test
    # A series of steps to run, some are similar to those in "build".
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"
      # Here we make sure that the secondary container boots
      # up before we run operations on the database.
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace
      # Run rspec in parallel
      - ruby/rspec-test

# We use workflows to orchestrate the jobs that we declared above.
workflows:
  version: 2
  build_and_test:     # The name of our workflow is "build_and_test"
    jobs:             # The list of jobs we run as part of this workflow.
      - build         # Run build first.
      - test:         # Then run test,
          requires:   # Test requires that build passes for it to run.
            - build   # Finally, run the build job.

#version: 2
#workflows:
#  build_and_test:     # The name of our workflow is "build_and_test"
#    jobs:             # The list of jobs we run as part of this workflow.
#      - build         # Run build first.
#      - test:         # Then run test,
#          requires:   # Test requires that build passes for it to run.
#            - build
#
#jobs:
#  build:
#    working_directory: ~/app
#    docker:
#      # specify the version you desire here
#      - image: circleci/ruby:2.6.3-node-browsers
#        environment:
#          RAILS_ENV: test
#          MAX_THREADS: 2
#          WEB_CONCURRENCY: 1
#
#          POSTGRES_PASSWORD: postgres
#          POSTGRES_USER: postgres
#          POSTGRES_DB: web_app
#          POSTGRES_HOST: 127.0.0.1
#          POSTGRES_PORT: 5432
#
#      # Specify service dependencies here if necessary
#      # CircleCI maintains a library of pre-built images
#      # documented at https://circleci.com/docs/2.0/circleci-images/
#      - image: circleci/postgres:9.5-alpine
#        environment:
#          POSTGRES_PASSWORD: postgres
#          POSTGRES_USER: postgres
#          POSTGRES_DB: web_app
#    steps:
#      - checkout
#      - run:
#          name: configure bundler
#          command: |
#            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
#            source $BASH_ENV
#            gem install bundler
#
#  test:
#    # run tests!
#    - run:
#        name: run tests
#        command: |
#          mkdir /tmp/test-results
#          TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
#
#          bundle exec rspec --format progress \
#                          --format RspecJunitFormatter \
#                          --out /tmp/test-results/rspec.xml \
#                          --format progress \
#                          $TEST_FILES
#
#
#    # collect reports
#    - store_test_results:
#        path: /tmp/test-results